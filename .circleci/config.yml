version: 2

jobs:
  fetch:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/project/aggregateur
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Generate locale
          command: |
            echo "fr_FR.UTF-8 UTF-8" | sudo tee -a /etc/locale.gen
            sudo locale-gen
      - restore_cache:
          keys:
          - v1-repos-{{ checksum "cache/repos" }}
      - run:
          name: Create folders
          command: |
            mkdir -p repos
            rm -rf data
      - run:
          name: Fetch remote repositories
          command: |
            . venv/bin/activate
            python main.py
      - run:
          name: Validate generated schemas.json
          command: |
            wget -O /tmp/schema-catalog.json https://opendataschema.frama.io/catalog/schema-catalog.json
            . venv/bin/activate
            jsonschema /tmp/schema-catalog.json -i data/schemas.json
      - run:
          name: Compute checksum of repos
          command: |
            find repos -type f -not -path '*/\.git/*' -exec md5sum {} \; | sort -k 2 | md5sum > "cache/repos"
      - save_cache:
          paths:
            - ./repos
          key: v1-repos-{{ checksum "cache/repos" }}
      - run:
          name: Fetch schema issues
          command: |
            . venv/bin/activate
            python issues.py
      - persist_to_workspace:
          root: .
          paths:
            - data
            - cache
  push_data:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - add_ssh_keys:
          fingerprints:
            - "03:6a:59:1d:4f:76:ee:e9:de:f2:2f:af:ac:f0:2b:a3"
      - run:
          name: Set Git identity
          command: |
            git config --global user.email "robot@circleci.com"
            git config --global user.name "CircleCI"
      - run:
          name: Push to GitHub
          command: |
            git clone git@github.com:etalab/schema.data.gouv.fr.git /tmp/schema.data.gouv.fr
            rm -rf /tmp/schema.data.gouv.fr/aggregateur/data
            rm -rf /tmp/schema.data.gouv.fr/aggregateur/cache
            mv /tmp/data /tmp/schema.data.gouv.fr/aggregateur/data
            mv /tmp/cache /tmp/schema.data.gouv.fr/aggregateur/cache
            cd /tmp/schema.data.gouv.fr/aggregateur
            if [ -n "$(git status --porcelain)" ]; then
              git add -A
              git commit -am "New data at $(date -u +'%Y-%m-%dT%H:%M:%SZ') [skip ci]"
              git push origin master
              curl -X POST -d {} https://api.netlify.com/build_hooks/$NETLIFY_KEY
            else
              echo "No changes";
            fi
  website:
    docker:
      - image: circleci/ruby:2.6.0-node
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - add_ssh_keys:
          fingerprints:
            - "03:6a:59:1d:4f:76:ee:e9:de:f2:2f:af:ac:f0:2b:a3"
      - run:
          name: Set Git identity
          command: |
            git config --global user.email "robot@circleci.com"
            git config --global user.name "CircleCI"
      - restore_cache:
          keys:
          - v2-web-{{ checksum "web/Gemfile.lock" }}-{{ checksum "web/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd web
            npm install
            bundle install --path vendor/bundle
      - save_cache:
          paths:
            - web/node_modules
            - web/vendor
          key: v2-web-{{ checksum "web/Gemfile.lock" }}-{{ checksum "web/package-lock.json" }}
      - run:
          name: Push to GitHub
          command: |
            cd web
            ./build.sh
            echo "schema.data.gouv.fr" > _site/CNAME
            npm run deploy
workflows:
  version: 2
  commit:
    jobs:
      - fetch:
          filters:
            branches:
              ignore:
                - gh-pages
      - push_data:
          requires:
            - fetch
          filters:
            branches:
              only:
                - master
      - website:
          requires:
            - push_data
          filters:
            branches:
              only:
                - master
  cron_fetch:
    triggers:
      - schedule:
          cron: "0 7-19 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - fetch
      - push_data:
          requires:
            - fetch
      - website:
          requires:
            - push_data
